// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	kgo "github.com/twmb/franz-go/pkg/kgo"

	mock "github.com/stretchr/testify/mock"
)

// KgoClientMock is an autogenerated mock type for the KgoClient type
type KgoClientMock struct {
	mock.Mock
}

type KgoClientMock_Expecter struct {
	mock *mock.Mock
}

func (_m *KgoClientMock) EXPECT() *KgoClientMock_Expecter {
	return &KgoClientMock_Expecter{mock: &_m.Mock}
}

// PollFetches provides a mock function with given fields: ctx
func (_m *KgoClientMock) PollFetches(ctx context.Context) kgo.Fetches {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for PollFetches")
	}

	var r0 kgo.Fetches
	if rf, ok := ret.Get(0).(func(context.Context) kgo.Fetches); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kgo.Fetches)
		}
	}

	return r0
}

// KgoClientMock_PollFetches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PollFetches'
type KgoClientMock_PollFetches_Call struct {
	*mock.Call
}

// PollFetches is a helper method to define mock.On call
//   - ctx context.Context
func (_e *KgoClientMock_Expecter) PollFetches(ctx interface{}) *KgoClientMock_PollFetches_Call {
	return &KgoClientMock_PollFetches_Call{Call: _e.mock.On("PollFetches", ctx)}
}

func (_c *KgoClientMock_PollFetches_Call) Run(run func(ctx context.Context)) *KgoClientMock_PollFetches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *KgoClientMock_PollFetches_Call) Return(_a0 kgo.Fetches) *KgoClientMock_PollFetches_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KgoClientMock_PollFetches_Call) RunAndReturn(run func(context.Context) kgo.Fetches) *KgoClientMock_PollFetches_Call {
	_c.Call.Return(run)
	return _c
}

// ProduceSync provides a mock function with given fields: ctx, rs
func (_m *KgoClientMock) ProduceSync(ctx context.Context, rs ...*kgo.Record) kgo.ProduceResults {
	_va := make([]interface{}, len(rs))
	for _i := range rs {
		_va[_i] = rs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ProduceSync")
	}

	var r0 kgo.ProduceResults
	if rf, ok := ret.Get(0).(func(context.Context, ...*kgo.Record) kgo.ProduceResults); ok {
		r0 = rf(ctx, rs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kgo.ProduceResults)
		}
	}

	return r0
}

// KgoClientMock_ProduceSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProduceSync'
type KgoClientMock_ProduceSync_Call struct {
	*mock.Call
}

// ProduceSync is a helper method to define mock.On call
//   - ctx context.Context
//   - rs ...*kgo.Record
func (_e *KgoClientMock_Expecter) ProduceSync(ctx interface{}, rs ...interface{}) *KgoClientMock_ProduceSync_Call {
	return &KgoClientMock_ProduceSync_Call{Call: _e.mock.On("ProduceSync",
		append([]interface{}{ctx}, rs...)...)}
}

func (_c *KgoClientMock_ProduceSync_Call) Run(run func(ctx context.Context, rs ...*kgo.Record)) *KgoClientMock_ProduceSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*kgo.Record, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(*kgo.Record)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *KgoClientMock_ProduceSync_Call) Return(_a0 kgo.ProduceResults) *KgoClientMock_ProduceSync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KgoClientMock_ProduceSync_Call) RunAndReturn(run func(context.Context, ...*kgo.Record) kgo.ProduceResults) *KgoClientMock_ProduceSync_Call {
	_c.Call.Return(run)
	return _c
}

// NewKgoClientMock creates a new instance of KgoClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKgoClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *KgoClientMock {
	mock := &KgoClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
