// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	event "github.com/douglasdgoulart/video-editor-api/pkg/event"
	mock "github.com/stretchr/testify/mock"
)

// EventReceiverMock is an autogenerated mock type for the EventReceiver type
type EventReceiverMock struct {
	mock.Mock
}

type EventReceiverMock_Expecter struct {
	mock *mock.Mock
}

func (_m *EventReceiverMock) EXPECT() *EventReceiverMock_Expecter {
	return &EventReceiverMock_Expecter{mock: &_m.Mock}
}

// Receive provides a mock function with given fields: ctx, handler
func (_m *EventReceiverMock) Receive(ctx context.Context, handler func(*event.Event) error) {
	_m.Called(ctx, handler)
}

// EventReceiverMock_Receive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Receive'
type EventReceiverMock_Receive_Call struct {
	*mock.Call
}

// Receive is a helper method to define mock.On call
//   - ctx context.Context
//   - handler func(*event.Event) error
func (_e *EventReceiverMock_Expecter) Receive(ctx interface{}, handler interface{}) *EventReceiverMock_Receive_Call {
	return &EventReceiverMock_Receive_Call{Call: _e.mock.On("Receive", ctx, handler)}
}

func (_c *EventReceiverMock_Receive_Call) Run(run func(ctx context.Context, handler func(*event.Event) error)) *EventReceiverMock_Receive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(*event.Event) error))
	})
	return _c
}

func (_c *EventReceiverMock_Receive_Call) Return() *EventReceiverMock_Receive_Call {
	_c.Call.Return()
	return _c
}

func (_c *EventReceiverMock_Receive_Call) RunAndReturn(run func(context.Context, func(*event.Event) error)) *EventReceiverMock_Receive_Call {
	_c.Call.Return(run)
	return _c
}

// NewEventReceiverMock creates a new instance of EventReceiverMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventReceiverMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventReceiverMock {
	mock := &EventReceiverMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
